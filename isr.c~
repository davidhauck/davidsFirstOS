#include "common.c"
#include "interface.c"

#ifndef ISR_C
#define ISR_C

typedef struct registers
{
    u32int ds;                  // Data segment selector
    u32int edi, esi, ebp, esp, ebx, edx, ecx, eax; // Pushed by pusha.
    u32int int_no, err_code;    // Interrupt number and error code (if applicable)
    u32int eip, cs, eflags, useresp, ss; // Pushed by the processor automatically.
} registers_t;

void isr_handler(registers_t regs)
{
	println("recieved interrupt");
	putDec(regs.intNo);
	putChar('\n');
}

#define IRQ0 32
#define IRQ1 33
#define IRQ2 34
#define IRQ3 35
#define IRQ4 36
#define IRQ5 37
#define IRQ6 38
#define IRQ7 39
#define IRQ8 40
#define IRQ9 41
#define IRQ10 42
#define IRQ11 43
#define IRQ12 44
#define IRQ13 45
#define IRQ14 46
#define IRQ15 47

typedef void (*isrT)(registers_t);
void registerInterruptHandler(unsigned char n, isrT handler);

isrT interruptHandlers[256];

void registerInterruptHandler(unsigned char n, isrT handler)
{
	println("registered interrupt");
	interruptHandlers[n] = handler;
}

void irq_handler(registers_t regs)
{
	println("had interrupt");
	// If the interrupt involved the slave:
	if (regs.intNo >= 40)
	{
		//reset the slave
		outb(0xA0, 0x20);
	}
   outb(0x20, 0x20);

	if (interruptHandlers[regs.intNo] != 0)
	{
		isrT handler = interruptHandlers[regs.intNo];
		handler(regs);
	}
}

#endif
